fit_all<-lm(mpg ~.,data=mtcars)
summary(fit_all)
fit<-lm(mpg~wt+hp*wt,data=mtcars)
summary(fit)
fit<-lm(mpg~wt+hp*(1/wt),data=mtcars)
summary(fit)
fit<-lm(mpg~wt+am,data=mtcars)
summary(fit)
fit<-lm(mpg~wt+am+qsec,data=mtcars)
summary(fit)
cor(mtcars)
sort(cor(mtcars)[1,])
fit<-lm(mpg~wt+cyl+disp+hp+am,data=mtcars)
summary(fit)
fit<-lm(mpg~wt+cyl+disp+hp,data=mtcars)
summary(fit)
plot(fit_am$residuals~fit_am$fitted)
plot(fit_am)
fit_mult<-lm(mpg ~wt+cyl+disp+hp,data=mtcars)
summary(fit_mult)
fit<-lm(mpg ~wt+cyl+disp+hp+am,data=mtcars)
summary(fit)
fit<-lm(mpg ~wt+hp,data=mtcars)
summary(fit)
fit<-lm(mpg ~wt+hp+am,data=mtcars)
summary(fit)
fit<-lm(mpg ~wt+hp+factor(am),data=mtcars)
summary(fit)
fit_am<-lm(mpg~factor(am),data=mtcars)
fit_mult<-lm(mpg ~wt+cyl+disp+hp,data=mtcars)
fit_mult_am<-lm(mpg ~wt+cyl+disp+hp+factor(am),data=mtcars)
anova(fit_am,fit_mult_am)
summary(fit_am)$coef
coef(fit_am)
coef(fit_am)[2]
library(car)
install.packages("car")
library(car)
fit<-lm(mpg~.,data=mtcars)
vif(fit)
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl<-lm(Fertility~.,data=swiss)
vif(mdl)
mdl2<-lm(Fertility~Agriculture+Education+Catholic+Infant.Mortality,data=swiss)
vif(mdl2)
x1c<-simbias()
apply(x1c,mean)
apply(x1c,1,mean)
fit1<-lm(Fertility~Agriculture,data=swiss)
fit3<-lm(Fertility~Agriculture+Examination + Education,data=swiss)
anova(fit1, fit3)
deviance(fit3)
d<-deviance(fit3)/43
n<-(deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2, 43,lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
library(datasets)
data(mtcars)
fit<-lm(mpg~.,data=mtcars)
summary(fit)$coef
fit2<-lm(mpg~am,data=mtcars)
fit3<-lm(mpg~wt,data=mtcars)
fit4<-lm(mpg~wt+am,data=mtcars)
fit5<-lm(mpg~cyl+disp+hp+drat+wt+qsec+vs+gear+carb,data=mtcars)
anova(fit,fit2,fit3,fit4,fit5)
anova(fit2,fit4,fit5,fit6)
anova(fit2,fit4,fit5,fit)
anova(fit1,fit4,fit5,fit)
anova(fit3,fit4,fit5,fit)
anova(fit2,fit4,fit)
install.packages(MASS)
install.packages("MASS")
library(MASS)
fit <- lm(mpg~.,data=mtcars)
step <- stepAIC(fit, direction="both")
step$anova
?stepAIC
summary(fit)
fit_am<-lm(mpg~am,data=mtcars)
summary(fit_am)
fit_wt<-lm(mpg~wt,data=mtcars)
summary(fit_wt)
fit_1<-lm(mpg~wt+am+qsec+hp,data=mtcars)
summary(fit_1)
fit_2<-lm(mpg~wt+am+qsec,data=mtcars)
summary(fit_2)
fit_3<-lm(mpg~wt+hp,data=mtcars)
summary(fit_3)
sort(cor(mtcars)[1,])
fit_4<-lm(mpg~wt+cyl+disp+hp+vs+drat+am,data=mtcars)
summary(fit_4)
fit <- lm(mpg~.,data=mtcars)
summary(fit)$coef
fit1<-lm(mpg~wt,data=mtcars)
fit2<-lm(mpg~wt+am,data=mtcars)
fit3<-lm(mpg~wt+am+qsec,data=mtcars)
fit3<-lm(mpg~wt+am+qsec+hp,data=mtcars)
anova(fit1,fit2,fit3,fit4)
fit4
fit1<-lm(mpg~wt,data=mtcars)
fit2<-lm(mpg~wt+am,data=mtcars)
fit3<-lm(mpg~wt+am+qsec,data=mtcars)
fit4<-lm(mpg~wt+am+qsec+hp,data=mtcars)
anova(fit1,fit2,fit3,fit4)
summary(fit3)
fit_final<-lm(mpg~factor(am)+wt+qsec,data=mtcars)
summary(fit_final)
fit_final2<-lm(mpg~factor(am)*wt+qsec,data=mtcars)
summary(fit_final2)
plot(fit_final2)
plot(fit_final)
bestfit<-lm(mpg ~wt+factor(am)+qsec,data=mtcars)
summary(bestfit)
bestfit<-lm(mpg ~wt+am+qsec,data=mtcars)
summary(bestfit)
summary(fit)$r.squared
?mtcars
library(MASS)
?shuttle
data(shuttle)
head(shuttle)
logmod<-glm(shuttle$use~shuttle$wind,family="binomial")
summary(logmod)
0.158/0.9
0.1/0.842
exp(logmod)
exp(logmod$coef)
logmod2<-glm(shuttle$use~shuttle$wind+shuttle$magn,family="binomial")
exp(logmod2$coef)
str(shuttle)
shuttle$test<-"noauto"
shuttle[shuttle$use=="noauto",8]<-"auto"
head(shuttle)
logmod3<-glm(shuttle$test~shuttle$wind,family="binomial")
logmod<-glm(shuttle$test~shuttle$wind,family="binomial")
shuttle[shuttle$test=="noauto",8]<-0
shuttle[shuttle$test=="auto",8]<-1
logmod3<-glm(shuttle$test~shuttle$wind,family="binomial")
head(shuttle)
auto$test
shuttle$test
shuttle$test<-as.factor(shuttle$test)
logmod3<-glm(shuttle$test~shuttle$wind,family="binomial")
summary(logmod)
summary(logmod3)
logmod4<-glm((shuttle$use-1)~shuttle$wind,family="binomial")
logmod4<-glm(I(shuttle$use-1)~shuttle$wind,family="binomial")
data(InsectSprays)
head(InsectSprays)
fit<-glm(count~factor(spray),data=InsectSpray,family="poisson")
fit<-glm(count~factor(spray),data="InsectSpray",family="poisson")
fit<-glm(count~factor(spray),data=InsectSprays,family="poisson")
summary(fit)$coef
exp(fit$coef)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots<-0
2.67/0.05
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot)^2)
xMat <- cbind(1, x, x^2, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
summary(lm(y~xMat-1))
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
summary(lm(y~xMat-1))
fit<-lm(y~xMat-1)
exp(fit$coef)
fit<-glm(count~factor(spray)-1,data=InsectSprays,family="poisson")
summary(fit)
2.67/2.73
exp(fit$coef)
14.5/15.33
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(concrete)
qplot(Superplasticizer, data=concrete, geom="hist")
?qplot
qplot(Superplasticizer, data=concrete, aes="hist")
logS<-log(concrete$Superplasticizer)
hist(logS)
hist(concrete$Superplasticizer)
hist(logS)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
str(training)
names<-names(training)
il<-gsub("^IL",names)
?gsub
il<-grep("^IL",names)
train2<-training(,il)
train2<-training[,il]
?preProcess
preProcess(train2,thresh=0.8,method="PCA")
preProcess(train2,thresh=0.8,method="pca")
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
train3<-training[,c(1,il)]
preProc<-preProcess(train3,thresh=0.8,method="pca")
pred<-predict(preProc,train3)
fit1<-train(train3$diagnosis~., method="glm", data=pred)
install.packages('e1071', dependencies=TRUE)
fit1<-train(train3$diagnosis~., method="glm", data=pred)
fit2<-train(train3$diagnosis~.,method="glm",data=train3)
summary(fit1)
fit1
fit2
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationoriginal)
str(segmentationOriginal)
intrain<-createDataPartition(y=segmentationOriginal$Case,list=F, p=0.7)
training<-segmentationOriginal[intrain,]
testing<-segmentationOriginal[-intrain,]
set.ceed(125)
set.seed(125)
fit<-train(Case~.,method='rpart',data=training)
library(rattle)
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(fit$finalModel)
install.packages("RColorBrewer")
library(RColorBrewer)
fancyRpartPlot(fit$finalModel)
plot(fit$finalModel)
plot(fit$finalModel,uniform=T)
text(fit$finalModel,use.n=T,all=T)
text(fit$finalModel,use.n=T,all=T,cex=.8)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(fit$finalModel)
print(fit$finalModel)
segmentationOriginal[1:10,1:5]
library(caret)
fit2<-train(Case~., data=segmentationOriginal,method="rpart")
fancyRpartPlot(fit2$finalModel)
set.ceed(125)
set.seed(125)
fit3<-train(Case~., data=segmentationOriginal,method="rpart")
fancyRpartPlot(fit3$finalModel)
print(fit3$finalModel)
set.seed(125)
fit3<-train(Case~., data=training,method="rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
intrain<-createDataPartition(y=segmentationOriginal$Case,p=0.7,list=F)
train1<-segmentationOriginal[intrain,]
test1<-segmentationOriginal[-intrain,]
train2<-segmentationOriginal[segmentationOriginal$Case=="train",]
test2<-segmentationOriginal[segmentationOriginal$Case=="test",]
set.seed(125)
fit1<-train(Case~.,data=train1,method="rpart")
train2<-segmentationOriginal[segmentationOriginal$Case=="Train",]
test2<-segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
fit2<-train(Case~.,data=train2,method="rpart")
print(fit1$finalModel)
set.seed(125)
fit3<-train(Class~.,data=train1,method="rpart")
print(fit3$finalModel)
fancyRpartPlot(fit3$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
modFit<-train(Area~.,data=olive,method="rpart")
str(olive)
summary(olive)
head(olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata)
modFit2<-train(as.factor(Area)~.,data=olive,method="rpart")
predict(modFit2,newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElementsLearn")
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(trainSA)
fit4<-train(chd~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, method="glm", family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA,fit4)
missClass(fit4,trainSA)
predTr<-predict(fit4,trainSA)
predTs<-predict(fit4,testSA)
missClass(fit4,predTr)
missClass(trainSA,predTr)
missClass(testSA,predTs)
missClass(testSA$chd,predTs)
missClass(trainSA$chd,predTr)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
summary(vowel.train)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
fit5<-train(y~.,data=vowel.train,method="rf")
?varImp
varImp(fit5)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
intrain<-createDataPartition(y=Case, data=segmentationOriginal, p=0.7, list=F)
intrain<-createDataPartition(y=segmentationOriginal$Case, p=0.7, list=F)
training<-segmentationOriginal[intrain,]
testing<-segmentationOriginal[-intrain,]
set.seed(125)
fit<-train(Class~.,method="rpart", data="training")
fit<-train(Class~.,method="rpart", data=training)
set.seed(125)
fit<-train(Class~.,method="rpart", data=training)
fancyRpartPlot(fit$finalModel)
setwd("D:\\DataScientist\\MachineLearning\\CP")
train<-read.csv("./pml-training")
head(train)
str(train)
train<-read.csv("./pml-training.csv")
head(train)
str(train)
dim(train)
summary(train$classe)
library(ggplot2)
qplot(classe,user_name, data=train)
qplot(classe,data=train,aes=hist)
qplot(classe,data=train,aes=hist,facets=user_name)
qplot(classe,data=train,aes=hist,facets="user_name")
qplot(classe,data=train,aes=hist,facets=~user_name)
qplot(user_name,data=train,aes=hist)
setwd("D:\\DataScientist\\MachineLearning\\CP")
dataTrain<-read.csv("./pml-training.csv")
dim(dataTrain)
library(caret)
inTrain<-createDataPartition(y=dataTrain$classe, p=0.7, list=F)
training<-dataTrain[inTrain,]
testing<-dataTrain[-inTrain,]
testRF<-testing
model<-train(classe~.,data=training, method="rf")
pred<-predict(model,testRF)
testRF$predRight<-pred==testRF$classe
table(pred,testRF$classe)
str(pred)
summary(pred)
dim(pred)
nrow(pred)
summary(testRF$classe)
testClean<-testing[complete.cases(testing),]
str(testClean)
head(testClean)
str(testClean$kurtosis_yaw_belt)
table(is.na(training))
table(is.na(training),names(training))
table(names(training),is.na(training))
?table
names(training)
colSums(!is.na(training))
library(ddplyr)
library(dplyr)
sort(colSums(!is.na(training))
)
colSums(is.na(training) & training==0)
colSums(is.na(training) | training==0 | training=="#DIV/0!" | training=="")
sort(colSums(is.na(training) | training==0 | training=="#DIV/0!" | training==""))
sort(colSums(is.na(training) | training=="#DIV/0!" | training==""))
str(training$max_roll_belt)
tail(training$max_roll_belt)
head(!is.na(training$max_roll_belt))
str(!is.na(training$max_roll_belt))
str(complete.cases(training$max_roll_belt))
head(training[complete.cases(training$max_roll_belt),])
head(training[complete.cases(training$max_roll_belt),training$max_roll_belt])
str(training[complete.cases(training$max_roll_belt),])
checkup<-training[is.na(training$max_roll_belt),]
sort(colSums(is.na(checkup) | checkup=="#DIV/0!" | checkup==""))
wrong<-training[!is.na(training$max_roll_belt),]
str(wrong)
notNA<-colSums(is.na(training) | training=="#DIV/0!" | training=="")==0
head(notNA)
notNA<-colSums(is.na(training) | training=="#DIV/0!" | training=="")
str(notNA)
head(notNA)
notNA<-colSums(is.na(training) | training=="#DIV/0!" | training=="")==0
str(notNA)
summary(notNA)
colSums(is.na(training) | training=="#DIV/0!" | training=="")
sort(colSums(is.na(training) | training=="#DIV/0!" | training==""))
cleanData<-dataTrain[,notNA]
sum(complete.cases(cleanData)
)
tail(dataTrain[,1])
?train
findCorellation(cleanData,cutoff=1,verbose=T)
findCorrelation(cleanData,cutoff=1,verbose=T)
findCorrelation(cleanData,cutoff=0.9,verbose=T)
cor(cleanData)
dataTrain<-read.csv("./pml-training.csv")
notNA<-colSums(is.na(training) | training=="#DIV/0!" | training=="")==0
notNA[1]<-0
cleanData<-dataTrain[,notNA]
dim(cleanData)
notNA<-colSums(is.na(dataTrain) | dataTrain=="#DIV/0!" | dataTrain=="")==0
notNA[1]<-0
cleanData<-dataTrain[,notNA]
dim(cleanData)
inTrain<-createDataPartition(y=cleanData$classe, p=0.7, list=F)
training<-cleanData[inTrain,]
testing<-cleanData[-inTrain,]
str(cleanData)
clean<-dataTrain[,c(0,1,1)]
head(clean)
clean<-dataTrain[,c(T,F,F)]
head(clean)
nna<-as.vector(notNA)
cleanData<-dataTrain[,notNA]
head(cleanData)
cleanData<-dataTrain[,nna]
head(cleanData)
clean<-dataTrain[,c(T,rep(F,159))]
clean<-dataTrain[,c(T,T,rep(F,158))]
head(clean)
notNA[notNA==0]<-F
notNA[notNA==1]<-T
notNA
cleanData<-dataTrain[,notNA]
head(cleanData)
notNA[notNA==0]<-"TRUE"
notNA[notNA==1]<-TRUE
nna[nna==0]<-TRUE
notNA<-colSums(is.na(dataTrain) | dataTrain=="#DIV/0!" | dataTrain=="")==0
notNA[1]<-0
nna<-as.vector(notNA)
nna[nna==0]<-FALSE
nna[nna==1]<-TRUE
dataTrain[,nna]
names<-names(notNA==1)
cleanData<-dataTrain[,names]
head(cleanData)
dataTrain<-read.csv("./pml-training.csv")
notNA<-colSums(is.na(dataTrain) | dataTrain=="#DIV/0!" | dataTrain=="")==0
notNA[1]<-0
names<-names(notNA==1)
cleanData<-dataTrain[,names]
dim(cleanData)
names<-names(notNA[notNA==1])
cleanData<-dataTrain[,names]
dim(cleanData)
library(caret)
inTrain<-createDataPartition(y=cleanData$classe, p=0.7, list=F)
training<-cleanData[inTrain,]
testing<-cleanData[-inTrain,]
model<-train(classe~.,data=training, method="rf", trControl=trainControl(method = "cv", number = 5, allowParallel=T))
pred<-predict(model,testRF)
pred<-predict(model,testing)
table(pred,testing$classe)
model$finalModel
plot(model$finalModel)
model
mean(model$Error)
nzv<-nearZeroVar(cleanData,saveMetrics=T)
nzv
